{"version":3,"sources":["components/button/button.js","types.ts","utils/save-file-utils.ts","components/footer-area/footer-area.js","utils/text-utils.ts","components/game-screen/main-menu/main-menu.tsx","components/game-screen/cutscene/cutscene.tsx","components/action-button/action-button.tsx","components/action-panel/action-panel.tsx","components/mood-handler/mood-handler.tsx","utilities.ts","components/action-description-text/action-description-text.tsx","components/information-panel/information-panel.tsx","components/game-screen/in-game-view/in-game-view.tsx","components/game-screen/game-screen.tsx","App.tsx","index.js"],"names":["Button","props","className","onClick","text","DEBUG","newGameState","action","money","mood","overall","r","g","b","unlockedFeatures","timeToNextOrder","timeUntilOrderCancel","uncheckedOrders","orders","widgetParts","widgets","testedWidgets","packages","completedOrders","timeSinceActionStarted","actionSwitchTime","nextAction","undefined","checkOrderTime","widgetBuildTime","widgetTestTime","widgetPackageTime","packageDeliveryTime","widgetPartPurchaseTime","hireWorkerTime","widgetPrice","widgetPartPrice","assignedWorkers","unassignedWorkers","workerHappiness","workerHourlySalary","workerSpeed","consultantLevel","salesLevel","hrSpecialists","workerManagers","companyDirectors","energyUsed","environmentImpact","stockPrice","itemName","loadGame","saveFile","localStorage","getItem","console","log","JSON","parse","saveFileExists","state","gameState","deleteSaveFileWithConfirm","window","confirm","removeItem","location","reload","FooterArea","liked","GameSavedText","LikeButton","this","setState","href","target","rel","React","Component","lastSaveTime","Date","now","getRandomMantra","index","Math","floor","random","mantras","length","MainMenu","MainMenuControls","startNewGame","startSavedGame","Cutscene","useState","textIndex","setTextIndex","lastIndex","advanceText","useEffect","interval","setInterval","textScreenTime","textFadeTime","clearInterval","endHandler","CutsceneText","settings","style","color","textColor","backgroundColor","bgColor","ActionButton","subtext","split","map","item","ActionPanel","setPlayerAction","parts","partPrice","MoodHandler","TEXT_COLOR_SWITCH_THRESHOLD","TEXT_COLOR_DARK","TEXT_COLOR_LIGHT","colorBrightness","sqrt","moodToRGB","elem","document","documentElement","bgCSSColor","colorToCSS","textCSSColor","setProperty","assertNever","x","Error","Object","keys","entries","ActionDescriptionText","currentAction","progressBar","value","max","barLength","character","progressPoints","ceil","min","repeat","InformationPanel","actionCompletionPercentage","getActionTargetTime","InGameView","newAction","updateGameState","nextState","payWorkerSalaries","paySalaries","initialState","stateJSON","stringify","setItem","toString","saveGame","debugEnabled","_","ns","newOrderTime","targetTime","numberDelivered","newTimeUntilOrderCancel","getAssignedWorkerAmount","values","v","reduce","a","deliveredPackages","outstandingOrders","pow","GameScreen","screenName","loadSavedGame","finishIntro","App","ReactDOM","render","getElementById"],"mappings":"qXAGe,SAASA,EAAOC,GAC7B,OACE,mCACE,wBAAQC,UAAWD,EAAMC,UAAWC,QAASF,EAAME,QAAnD,SAA6DF,EAAMG,S,UCH5DC,GAAQ,EAyFRC,EAA0B,CACrCC,OAAQ,OACRC,MAAO,IACPC,KAAM,CACJC,QAAS,GACTC,EAAG,EACHC,EAAG,EACHC,EAAG,GAELC,iBAAkB,CAChB,gBAAgB,GAGlBC,gBAAiB,KACjBC,qBAAsB,KACtBC,gBAAiB,EACjBC,OAAQ,EAERC,YAAa,EACbC,QAAS,EACTC,cAAe,EACfC,SAAU,EACVC,gBAAiB,EAEjBC,uBAAwB,EACxBC,iBAAkB,KAClBC,gBAAYC,EAGZC,eAAgB,IAChBC,gBAAiB,IACjBC,eAAgB,IAChBC,kBAAmB,KACnBC,oBAAqB,KACrBC,uBAAwB,IACxBC,eAAgB,KAEhBC,YAAa,KACbC,gBAAiB,IAEjBC,gBAAiB,GACjBC,kBAAmB,EACnBC,gBAAiB,GACjBC,mBAAoB,KACpBC,YAAa,GAEbC,gBAAiB,EACjBC,WAAY,EACZC,cAAe,EACfC,eAAgB,EAChBC,iBAAkB,EAElBC,WAAY,EACZC,kBAAmB,EACnBC,WAAY,GChJRC,EAAW,aASV,SAASC,IACd,IAAMC,EAA0BC,aAAaC,QAAQJ,GACrD,OAAiB,OAAbE,GACFG,QAAQC,IAAI,wDACLlD,IAETiD,QAAQC,IAAIJ,GACLK,KAAKC,MAAMN,IAGb,SAASO,IACd,IAwB0BC,EAxBpBR,EAAWC,aAAaC,QAAQJ,GACtC,GAAwB,kBAAbE,EAAuB,CAChC,IAAMS,EAAYJ,KAAKC,MAAMN,GAC7B,QAsBezB,KADSiC,EArBRC,IAuBJ,OAAVD,GAEwB,kBAAjBA,EAAMrD,QACU,kBAAhBqD,EAAMpD,OACS,kBAAfoD,EAAMnD,MACqB,kBAA3BmD,EAAM9C,kBAEoB,kBAA1B8C,EAAM3C,iBACW,kBAAjB2C,EAAM1C,QACY,kBAAlB0C,EAAMxC,SACkB,kBAAxBwC,EAAMvC,eACa,kBAAnBuC,EAAMtC,UACoB,kBAA1BsC,EAAMrC,gBAlCb,OAAO,EAEPgC,QAAQC,IAAR,8DAAmEJ,IAGvE,OAAO,EAGF,SAASU,IACVC,OAAOC,QAAQ,yFACZD,OAAOC,QAAQ,mHAClBX,aAAaY,WAAWf,GACxBG,aAAaY,WAAW,cACxBZ,aAAaY,WAAW,cACxBZ,aAAaY,WAAW,cACxBF,OAAOG,SAASC,W,ICpCDC,E,kDACnB,WAAYnE,GAAQ,IAAD,8BACjB,cAAMA,IACD2D,MAAQ,CAAES,OAAO,GAFL,E,qDAKT,IAAD,OACP,OACE,sBAAKnE,UAAU,mBAAf,UACE,cAACoE,EAAD,IACA,cAACC,EAAD,CAAYF,MAAOG,KAAKZ,MAAMS,MAAOlE,QAAS,kBAAM,EAAKsE,SAAS,CAAEJ,OAAO,OAC3E,oCACA,cAACrE,EAAD,CAAQI,KAAK,aAAaD,QAAS2D,IACnC,oCACA,qBAAK5D,UAAU,SAAf,SAAwB,mBAAGwE,KAAK,uCAAuCC,OAAO,SAASC,IAAI,sBAAnE,sBACxB,oCACA,qBAAK1E,UAAU,mBAAf,6C,GAhBgC2E,IAAMC,WAsB9C,SAASP,EAAWtE,GAClB,OAAIA,EAAMoE,MAED,qBAAKnE,UAAU,gBAAf,kCAEA,cAACF,EAAD,CAAQG,QAASF,EAAME,QAASC,KAAK,SAIhD,SAASkE,EAAcrE,GACrB,IAAM8E,EAAe1B,aAAaC,QAAQ,eAC1C,GAA4B,kBAAjByB,GACYC,KAAKC,MAAQD,KAAKtB,MAAMqB,GAC1B,KACjB,OAAO,mDAGX,OAAO,6BC5CF,SAASG,IACd,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWC,EAAQC,QACjD,OAAOD,EAAQJ,GAOjB,IAAMI,EAAoB,CACxB,oBACA,uBACA,mBACA,yBACA,0BACA,6BACA,2BACA,uBACA,wBACA,sBACA,gBACA,+DACA,iBACA,0BACA,cACA,YACA,0BACA,kBACA,mBACA,qBACA,kBACA,yBACA,4BACA,wBACA,wBCtBa,SAASE,EAASxF,GAC/B,OACE,sBAAKC,UAAU,YAAf,UACE,2CAEA,cAACwF,EAAD,CAAkBC,aAAc1F,EAAM0F,aAAcC,eAAgB3F,EAAM2F,iBAC1E,cAAC,EAAD,OAKN,SAASF,EAAiBzF,GACxB,OAAI0D,IAEA,qCACE,qBAAKzD,UAAU,cAAf,SACGgF,MAEH,cAAClF,EAAD,CAAQE,UAAU,4CAA4CC,QAASF,EAAM2F,eAAgBxF,KAAK,yBAKtG,qCACE,qBAAKF,UAAU,cAAf,SD9BGqF,EAAQ,KCiCX,cAACvF,EAAD,CAAQE,UAAU,4CAA4CC,QAASF,EAAM0F,aAAcvF,KAAK,sB,iBCxBvF,SAASyF,EAAS5F,GAAe,IAAD,EACX6F,mBAAS,GADE,mBACtCC,EADsC,KAC3BC,EAD2B,KAEvCC,EAAYhG,EAAMG,KAAKoF,OAEvBU,EAAc,kBAAMF,EAAaD,EAAY,IAEnDI,qBAAU,WACR,KAAIJ,GAAaE,GAAjB,CAIA,IAAMG,EAAWC,YAAYH,EAAajG,EAAMqG,eAAsC,EAArBrG,EAAMsG,cACvE,OAAO,kBAAMC,cAAcJ,IAJzBnG,EAAMwG,gBASV,OACE,mCACE,cAACC,EAAD,CAActG,KAJQH,EAAMG,KAAK2F,GAIEY,SAAW1G,MAKpD,SAASyG,EAAazG,GACpB,OACE,mCACE,qBAAKC,UAAU,gBAAgB0G,MAAO,CAAEC,MAAO5G,EAAM0G,SAASG,UAAWC,gBAAiB9G,EAAM0G,SAASK,SAAzG,SACI/G,EAAMG,S,uBCvCD,SAAS6G,EAAahH,GACnC,OACE,uBAAMC,UAAU,0BAAhB,UACE,cAACF,EAAD,CAAQI,KAAMH,EAAMG,KAAMD,QAASF,EAAME,QAASD,UAAU,iCAC3DD,EAAMiH,QAAQC,MAAM,MAAMC,KAAI,SAAAC,GAAI,OAAI,sBAAiBnH,UAAU,wBAA3B,SAAoDmH,GAAzCA,SCWzC,SAASC,EAAYrH,GAClC,OACE,sBAAKC,UAAU,uBAAf,UACGD,EAAMa,iBAAiB,iBAAmB,cAACmG,EAAD,CAAc7G,KAAK,eAAe8G,QAAO,kBAAajH,EAAMiB,QAAUf,QAAS,kBAAMF,EAAMsH,gBAAgB,mBACrJtH,EAAMa,iBAAiB,iBAAmB,cAACmG,EAAD,CAAc7G,KAAK,gBAAgB8G,QAAO,iBAAYjH,EAAMuH,MAAlB,sBAAqCvH,EAAMmB,SAAWjB,QAAS,kBAAMF,EAAMsH,gBAAgB,mBAC/KtH,EAAMa,iBAAiB,gBAAkB,cAACmG,EAAD,CAAc7G,KAAK,eAAe8G,QAAO,0BAAqBjH,EAAMoB,eAAiBlB,QAAS,kBAAMF,EAAMsH,gBAAgB,kBACnKtH,EAAMa,iBAAiB,mBAAqB,cAACmG,EAAD,CAAc7G,KAAK,kBAAkB8G,QAAO,oBAAejH,EAAMqB,UAAYnB,QAAS,kBAAMF,EAAMsH,gBAAgB,qBAC9JtH,EAAMa,iBAAiB,mBAAqB,cAACmG,EAAD,CAAc7G,KAAK,mBAAmB8G,QAAO,4BAAuBjH,EAAMsB,iBAAmBpB,QAAS,kBAAMF,EAAMsH,gBAAgB,uBAC9KtH,EAAMa,iBAAiB,0BAA4B,cAACmG,EAAD,CAAc7G,KAAK,iBAAiB8G,QAAO,sBAAiBjH,EAAMwH,WAAatH,QAAS,kBAAMF,EAAMsH,gBAAgB,wB,ICpBzJG,E,4MACXC,4BAAsC,I,EACtCC,gBAA0B,O,EAC1BC,iBAA2B,O,wDAGjBpH,GAChB,MAAO,CACLE,EAAGF,EAAKC,QAAUD,EAAKE,EACvBC,EAAGH,EAAKC,QAAUD,EAAKG,EACvBC,EAAGJ,EAAKC,QAAUD,EAAKI,K,mCAKNgG,GACnB,OAAIrC,KAAKsD,gBAAgBjB,GAASrC,KAAKmD,4BAC9BnD,KAAKqD,iBAELrD,KAAKoD,kB,sCAMQf,GACtB,OAAOzB,KAAK2C,KAAK,KAAQlB,EAAMlG,EAAIkG,EAAMlG,EAAI,KAAQkG,EAAMjG,EAAIiG,EAAMjG,EAAI,KAAQiG,EAAMhG,EAAIgG,EAAMhG,K,iCAIhFgG,GACjB,IAAMlG,EAAIyE,KAAKC,MAAMwB,EAAMlG,GACrBC,EAAIwE,KAAKC,MAAMwB,EAAMjG,GACrBC,EAAIuE,KAAKC,MAAMwB,EAAMhG,GAC3B,MAAM,OAAN,OAAcF,EAAd,YAAmBC,EAAnB,YAAwBC,EAAxB,O,+BAIA,IAAMJ,EAAO+D,KAAKvE,MAAMQ,KAClBoG,EAAQrC,KAAKwD,UAAUvH,GACvBwH,EAAOC,SAASC,gBAChBC,EAAa5D,KAAK6D,WAAWxB,GAC7ByB,EAAe9D,KAAK8D,aAAazB,GAIvC,OAHAoB,EAAKrB,MAAM2B,YAAY,0BAA2BH,GAClDH,EAAKrB,MAAM2B,YAAY,oBAAqBD,GAG1C,iC,GA/CmCzD,IAAMC,W,MCKxC,SAAS0D,EAAYC,GAC1B,MAAM,IAAIC,MAAJ,+CAAkDD,IAG3BE,OAAOC,KACJD,OAAOE,QCT1B,SAASC,EAAT,GAA0D,IAAzBC,EAAwB,EAAxBA,cAC9C,OACE,oDAIsB,SAAlBA,EAA2B,QACT,kBAAlBA,EAAoC,qBAClB,iBAAlBA,EAAmC,mBACjB,iBAAlBA,EAAmC,qBACjB,gBAAlBA,EAAkC,oBAChB,mBAAlBA,EAAqC,sBACnB,qBAAlBA,EAAuC,uBACrB,mBAAlBA,EAAqC,oBACnB,gBAAlBA,EAAkC,kBAClCP,EAAYO,MCjBb,SAASC,EAAYC,EAAeC,GAAuE,IAA1DC,EAAyD,uDAArC,GAAIC,EAAiC,uDAAb,IAC9FC,EAAiBjE,KAAKkE,KAAKlE,KAAK8D,IAAI,EAAG9D,KAAKmE,IAAIN,EAAOC,KAASA,EAAM,KAAQC,GAClF,MAAM,SAAN,OAAWC,EAAUI,OAAOH,IAA5B,OAA8C,IAAIG,OAAOL,EAAYE,GAArE,UAGa,SAASI,EAAiBxJ,GAEvC,IAAMyJ,EAA6BtE,KAAKC,MAAMpF,EAAM2D,MAAMpC,uBAAyBmI,EAAoB1J,EAAM2D,OAAS,KAGtH,OACE,sBAAK1D,UAAU,8BAAf,UAEI,cAAC4I,EAAD,CAAuBC,cAAe9I,EAAM2D,MAAMrD,SAClD,sBAAKL,UAAWD,EAAM2D,MAAM9C,iBAAiB,eAAiB,4BAA8B,SAA5F,sBAGI,qBAAKZ,UAAU,sBAAf,SAAsC8I,EAAYU,EAA4B,OAHlF,WAISA,EAJT,KAKKC,EAAoB1J,EAAM2D,OAAS,KAAnC,YACQwB,KAAKC,OAAOsE,EAAoB1J,EAAM2D,OAAS3D,EAAM2D,MAAMpC,uBAAyB,KAAQ,KADpG,YAQL,qBAAKtB,UAAWD,EAAM2D,MAAM9C,iBAAiB,iBAAmBb,EAAM2D,MAAM9C,iBAAiB,yBAA2B,4BAA8B,WAEtJ,sBAAKZ,UAAWD,EAAM2D,MAAM9C,iBAAiB,iBAAmBb,EAAM2D,MAAM9C,iBAAiB,yBAA2B,aAAe,SAAvI,oBACYb,EAAM2D,MAAMpD,SACxB,sBAAKN,UAAWD,EAAM2D,MAAMlB,iBAAmB,EAAI,oBAAsB,SAAzE,sCAC8B0C,KAAKC,MAAMpF,EAAM2D,MAAM5C,qBAAuB,KAD5E,UAEA,sBAAKd,UAAWD,EAAM2D,MAAM9C,iBAAiB,yBAA2B,yBAA2B,SAAnG,yCACiCb,EAAM2D,MAAMxB,mBAC7C,sBAAKlC,UAAWD,EAAM2D,MAAM9C,iBAAiB,kBAAoB,oBAAsB,SAAvF,gCACwBb,EAAM2D,MAAMzB,kB,IC7BvByH,E,kDACnB,WAAY3J,GAAe,IAAD,8BACxB,cAAMA,IAQRsH,gBAAkB,SAACsC,GACbA,IAAc,EAAKjG,MAAMrD,OAE3B,EAAKkE,SAAS,CACZlE,OAAQ,SAGV,EAAKkE,SAAS,CACZlE,OAAQ,gBACRmB,WAAYmI,EACZrI,uBAAwB,KAnBJ,EAwB1BsI,gBAAkB,WAChB,EAAKrF,SAASsF,IAzBU,EA4B1BC,kBAAoB,WAClB,EAAKvF,SAASwF,IA3Bd,EAAKrG,MAAQ3D,EAAMiK,aAEnBnG,OAAOsC,YAAY,EAAKyD,gBAAiB,IACzC/F,OAAOsC,aAAY,kBXfhB,SAAkBzC,GACvB,IAAMuG,EAAY1G,KAAK2G,UAAUxG,GACjCP,aAAagH,QAAQnH,EAAUiH,GAC/B9G,aAAagH,QAAQ,cAAerF,KAAKC,MAAMqF,YAC/C/G,QAAQC,IAAR,cWW2B+G,CAAS,EAAK3G,SAAQ,KAC/CG,OAAOsC,YAAY,EAAK2D,kBAAmB,KANnB,E,qDAiCxB,OACE,sBAAK9J,UAAU,iBAAf,UACE,cAACuJ,EAAD,CACEe,aAAcnK,EACduD,MAAOY,KAAKZ,QAGd,cAAC0D,EAAD,CACEpG,OAAQsD,KAAKZ,MAAM1C,OACnBsG,MAAOhD,KAAKZ,MAAMzC,YAClBC,QAASoD,KAAKZ,MAAMxC,QACpBC,cAAemD,KAAKZ,MAAMvC,cAC1BC,SAAUkD,KAAKZ,MAAMtC,SACrBC,gBAAiBiD,KAAKZ,MAAMrC,gBAE5BkG,UAAWjD,KAAKZ,MAAMxB,gBAEtBmF,gBAAiB/C,KAAK+C,gBACtBzG,iBAAkB0D,KAAKZ,MAAM9C,mBAE/B,cAAC,EAAD,IACA,cAAC,EAAD,CAAaL,KAAM+D,KAAKZ,MAAMnD,c,GAvDEoE,IAAMC,WA8DxCiF,EAAY,SAACnG,EAAkB6G,GACnC,IAAMC,EAAa,eAAQ9G,GAM3B8G,EAAG3J,iBAAmB,GAClB2J,EAAG3J,gBAAkB,IACvB2J,EAAGzJ,iBAAmB,EACtByJ,EAAG3J,gBAAkB4J,EAAaD,EAAGnJ,kBAIvCmJ,EAAGlJ,wBAA0B,GAC7B,IAAMoJ,EAAajB,EAAoBe,GACvC,GAAkB,SAAdA,EAAGnK,QACDmK,EAAGlJ,wBAA0BoJ,EAE/B,OADAF,EAAGlJ,wBAA0BoJ,EACrBF,EAAGnK,QACT,IAAK,gBACHmK,EAAGnK,YAA2BoB,IAAlB+I,EAAGhJ,WAA2BgJ,EAAGhJ,WAAa,OAC1DgJ,EAAGhJ,gBAAaC,EAChB+I,EAAGlJ,uBAAyB,EAC5B,MACF,IAAK,eACQ+B,QAAQC,IAAR,cAAmBkH,EAAGzJ,gBAAtB,iCAA8DyJ,EAAGzJ,gBAAkByJ,EAAGvI,YAAtF,SACXuI,EAAGxJ,QAAUwJ,EAAGzJ,gBAChByJ,EAAGlK,OAASkK,EAAGzJ,gBAAkByJ,EAAGvI,YACpCuI,EAAGzJ,gBAAkB,EACrB,MACF,IAAK,eACCyJ,EAAGvJ,YAAc,IACnBuJ,EAAG3H,YAAc,EACjB2H,EAAGtJ,SAAW,EACdsJ,EAAGvJ,aAAe,GAEpB,MACF,IAAK,cACCuJ,EAAGtJ,QAAU,IACfsJ,EAAG3H,YAAc,GACjB2H,EAAGrJ,eAAiB,EACpBqJ,EAAGtJ,SAAW,GAEhB,MACF,IAAK,iBACCsJ,EAAGrJ,cAAgB,IACrBqJ,EAAGpJ,UAAY,EACfoJ,EAAGrJ,eAAiB,GAEtB,MACF,IAAK,mBACH,IAAMwJ,EAAkBzF,KAAKmE,IAAImB,EAAGxJ,OAAQwJ,EAAGpJ,UAC/CiC,QAAQC,IAAR,qBAA0BqH,EAA1B,cAEAH,EAAGxJ,QAAU2J,EACbH,EAAGnJ,iBAAmBsJ,EACtBH,EAAG1J,sBAAwB2J,EAAaD,EAAGnJ,iBAAmBsJ,EAC9DH,EAAGpJ,UAAYuJ,EAEfH,EAAGvI,aAAe0I,EAElBH,EAAGnK,OAAS,OACZ,MACF,IAAK,iBACCmK,EAAGlK,OAASkK,EAAGtI,kBACjBsI,EAAGvJ,aAAe,EAClBuJ,EAAGlK,OAASkK,EAAGtI,iBAEjB,MACF,IAAK,cACCsI,EAAGlK,OAASkK,EAAGlI,qBACjBkI,EAAGpI,mBAAqB,GAgDlC,OAtCAoI,EAAG1J,sBAAwB,GACvB0J,EAAG1J,qBAAuB,IACxB0J,EAAGxJ,OAAS,GACdwJ,EAAGxJ,QAAU,EACbwJ,EAAGlK,OAASkK,EAAGvI,YACJoB,QAAQC,IAAR,gCAAqCkH,EAAGvI,YAAxC,iBAA4DuI,EAAGxJ,OAA/D,wBAAqFwJ,EAAGzJ,gBAAxF,oCAAmI6J,EAAwBJ,EAAGnJ,gBAAiBmJ,EAAGxJ,OAASwJ,EAAGzJ,iBAAmB,IAAjN,eAEXyJ,EAAGzJ,iBAAmB,EACXsC,QAAQC,IAAR,kDAAuDkH,EAAGxJ,OAA1D,wBAAgFwJ,EAAGzJ,gBAAnF,oCAA8H6J,EAAwBJ,EAAGnJ,gBAAiBmJ,EAAGxJ,OAASwJ,EAAGzJ,iBAAmB,IAA5M,cAEbyJ,EAAG1J,qBAAuB8J,EAAwBJ,EAAGnJ,gBAAiBmJ,EAAGxJ,OAASwJ,EAAGzJ,kBAInFmE,KAAKE,SAAW,GAAKoF,EAAGnJ,gBAAkB,IAAO,OACnDmJ,EAAGvI,aAAeiD,KAAKC,OAAOD,KAAKE,SAAW,MAAS,KAAOoF,EAAGvI,aAAe,MACrEoB,QAAQC,IAAR,kCAAuCkH,EAAGvI,eAEnDiD,KAAKE,SAAW,GAAKoF,EAAGvJ,YAAc,OACxCuJ,EAAGtI,iBAAmBgD,KAAKC,OAAOD,KAAKE,SAAW,MAAS,IAAMoF,EAAGtI,iBAAmB,MAC5EmB,QAAQC,IAAR,uCAA4CkH,EAAGtI,mBAI5DsI,EAAG5J,iBAAH,eACK4J,EAAG5J,kBAEJ4J,EAAGxJ,OAAS,IAAMwJ,EAAG5J,iBAAiB,kBAAmB4J,EAAGnK,OAAS,OAAQmK,EAAG5J,iBAAiB,iBAAkB,GACnH4J,EAAGtJ,SAAW,IAAKsJ,EAAG5J,iBAAiB,gBAAiB,GACxD4J,EAAGrJ,eAAiB,IAAKqJ,EAAG5J,iBAAiB,mBAAoB,GACjE4J,EAAGpJ,SAAW,IAAKoJ,EAAG5J,iBAAiB,mBAAoB,GACxC,IAAnB4J,EAAGvJ,cAAqBuJ,EAAG5J,iBAAiB,0BAA2B,GAEhD,IAAvB4J,EAAGnJ,kBAAyBmJ,EAAG5J,iBAAiB,uBAAwB,GACxE4J,EAAGpI,kBAAoB,IAAKoI,EAAG5J,iBAAiB,0BAA2B,GAIxE4J,GAIHT,EAAc,SAACrG,EAAkB6G,GACrC,IAAMC,EAAa,eAAQ9G,GAE3B,OADA8G,EAAGlK,QAAUkK,EAAGpI,kBAAoByI,EAAwBL,IAAOA,EAAGlI,mBAAqB,GACpFkI,GAGHK,EAA0B,SAACnH,GAC/B,OAAW+E,OAAOqC,OAAOpH,EAAMvB,iBAAiB+E,KAAI,SAAA6D,GAAC,cAAIA,QAAJ,IAAIA,IAAK,KHtMjDC,QAAO,SAACC,EAAGtK,GAAJ,OAAUsK,EAAItK,IAAG,IG2MjC8J,EAAe,SAACS,GACpB,OAAO,KAAkBA,EAAoB,KAGzCN,EAA0B,SAACM,EAA2BC,GAC1D,OAAO,MAAsBD,EAAoB,KAAUhG,KAAKkG,IAAID,EAAoB,EAAG,KAGhF1B,EAAsB,SAAC/F,GAClC,OAAQA,EAAMrD,QACZ,IAAK,gBAAiB,OAAOqD,EAAMnC,iBAEnC,IAAK,eAAgB,OAAOmC,EAAMhC,eAClC,IAAK,eAAgB,OAAOgC,EAAM/B,gBAClC,IAAK,cAAe,OAAO+B,EAAM9B,eACjC,IAAK,iBAAkB,OAAO8B,EAAM7B,kBACpC,IAAK,mBAAoB,OAAO6B,EAAM5B,oBAEtC,IAAK,iBAAkB,OAAO4B,EAAM3B,uBACpC,IAAK,cAAe,OAAO2B,EAAM1B,eACjC,QACE,OAAO,OC1NQqJ,E,kDAEnB,WAAYtL,GAAa,IAAD,8BACtB,cAAMA,IAIR0F,aAAe,WACbpC,QAAQC,IAAI,eACZ,EAAKiB,SAAS,CACZ+G,WAAY,WARQ,EAYxB5F,eAAiB,WACf,EAAKnB,SAAS,CACZ+G,WAAY,iBACZC,eAAe,KAfK,EAmBxBC,YAAc,WACZ,EAAKjH,SAAS,CACZ+G,WAAY,iBACZC,eAAe,KApBjB,EAAK7H,MAAQ,CAAE4H,WAAY,aAFL,E,qDA2BtB,MAA8B,cAA1BhH,KAAKZ,MAAM4H,WAEX,cAAC/F,EAAD,CAAUE,aAAcnB,KAAKmB,aAAcC,eAAgBpB,KAAKoB,iBAE/B,UAA1BpB,KAAKZ,MAAM4H,WAElB,cAAC3F,EAAD,CAAUzF,KAAM,CAAC,oCAAgC,sCAAuC,qCAAsC,gFAAiF,gEAAiEmG,aAAc,IAAKD,eAAgB,IAAKU,QAAQ,OAAOF,UAAU,OAAOL,WAAYjC,KAAKkH,cAExU,mBAA1BlH,KAAKZ,MAAM4H,WAElB,cAAC,EAAD,CAAYtB,aAAc1F,KAAKZ,MAAM6H,cAAgBtI,IAAa7C,IAIlE,+H,GA3CgCuE,IAAMC,WCVzB6G,E,uKAEjB,OACE,sBAAKzL,UAAU,MAAf,UACE,sBAAMwE,KAAK,2FAA2FE,IAAI,eAC1G,cAAC,EAAD,W,GALyBE,a,MCCjC8G,IAASC,OAAO,cAAC,EAAD,IAAS3D,SAAS4D,eAAe,W","file":"static/js/main.7208ba66.chunk.js","sourcesContent":["import React from 'react'\nimport './button.sass'\n\nexport default function Button(props) {\n  return (\n    <>\n      <button className={props.className} onClick={props.onClick}>{props.text}</button>\n    </>\n  );\n}\n","// Various game state and handling related typings for the project\n\nexport const FPS = 50\nexport const DEBUG = true\n\nexport type Mood = Color & {\n  overall: number // 0-155 for Overall, 0-100 for RGB values\n}\n\nexport type Color = {\n  r: number // 0-255\n  g: number // 0-255\n  b: number // 0-255\n}\n\nexport type GameState = {\n  action: PlayerAction\n  money: number\n  mood: Mood\n  unlockedFeatures: { [key in FeatureName]?: boolean }\n\n  timeToNextOrder: number // time to add an unchecked order in milliseconds\n  timeUntilOrderCancel: number\n  uncheckedOrders: number\n  orders: number\n\n  widgetParts: number\n  widgets: number\n  testedWidgets: number\n  packages: number\n  completedOrders: number\n\n  timeSinceActionStarted: number\n  actionSwitchTime: number // delay between actions to cater for context switch, 'preparing to check orders'\n  nextAction: PlayerAction | undefined\n\n  checkOrderTime: number\n  widgetBuildTime: number\n  widgetTestTime: number\n  widgetPackageTime: number\n  packageDeliveryTime: number\n  widgetPartPurchaseTime: number\n  hireWorkerTime: number\n\n  widgetPrice: number\n  widgetPartPrice: number\n\n  unassignedWorkers: number\n  assignedWorkers: { [key in PlayerAction]?: number }\n  workerHappiness: number // TODO: consider more deeply what goes into this\n  workerHourlySalary: number\n  workerSpeed: number\n\n  consultantLevel: number\n  salesLevel: number\n  hrSpecialists: number\n  workerManagers: number\n  companyDirectors: number // CEO, CTO, CXO, etc\n\n  energyUsed: number\n  environmentImpact: number // co2 tons released/captured in total\n  stockPrice: number\n}\n\n// action names other than 'idle' should have a verb and noun, in imperative and base singular/plural form\nexport type PlayerAction =\n  | 'idle'\n  | 'change-action'\n  | 'check-orders'\n  | 'build-widget'\n  | 'test-widget'\n  | 'package-widget'\n  | 'deliver-packages'\n  | 'purchase-parts'\n  | 'hire-worker'\n\nexport type FeatureName =\n  | 'order-button'\n  | 'build-button'\n  | 'test-button'\n  | 'package-button'\n  | 'deliver-button'\n  | 'purchase-parts-button'\n  | 'hire-worker-button'\n  | 'assign-worker-buttons'\n  | 'hire-office-assistant-button'\n  | 'hire-sales-specialist-button'\n  | 'hire-consultant-button'\n  | 'hire-hr-specialist-button'\n  | 'hire-worker-manager-button'\n  | 'hire-ceo-button'\n\nexport const newGameState: GameState = {\n  action: 'idle',\n  money: 40000, // in something similar to 2019 yen - i.e. USD 0.01\n  mood: {\n    overall: 28,\n    r: 0,\n    g: 0,\n    b: 0,\n  },\n  unlockedFeatures: {\n    'order-button': true,\n  },\n\n  timeToNextOrder: 12 * 1000,\n  timeUntilOrderCancel: 150 * 1000,\n  uncheckedOrders: 0,\n  orders: 0,\n\n  widgetParts: 8,\n  widgets: 0,\n  testedWidgets: 0,\n  packages: 0,\n  completedOrders: 0,\n\n  timeSinceActionStarted: 0,\n  actionSwitchTime: 2300,\n  nextAction: undefined,\n\n  // how long it takes to finish various actions\n  checkOrderTime: 3000,\n  widgetBuildTime: 7000,\n  widgetTestTime: 3000,\n  widgetPackageTime: 1200, // TODO: can package without testing?\n  packageDeliveryTime: 12000,\n  widgetPartPurchaseTime: 800,\n  hireWorkerTime: 32000,\n\n  widgetPrice: 1400,\n  widgetPartPrice: 850,\n\n  assignedWorkers: {},\n  unassignedWorkers: 0,\n  workerHappiness: 70, // TODO: consider more deeply what goes into this\n  workerHourlySalary: 1300,\n  workerSpeed: 0.2, // relative to player, increases over time and when hiring consultants (increased skills), decreases when hiring workers (communication overhead)\n\n  consultantLevel: 0,\n  salesLevel: 0,\n  hrSpecialists: 0,\n  workerManagers: 0,\n  companyDirectors: 0, // CEO, CTO, CXO, etc\n\n  energyUsed: 0, // kwh\n  environmentImpact: 0, // co2 tons released/captured in total (4300 kwh/1000kg)\n  stockPrice: 0,\n}\n","import { GameState, newGameState } from \"../types\"\n\nconst itemName = 'saveFile01'\n\nexport function saveGame(state: GameState): void {\n  const stateJSON = JSON.stringify(state)\n  localStorage.setItem(itemName, stateJSON)\n  localStorage.setItem('lastSavedAt', Date.now().toString())\n  console.log(`game saved`)\n}\n\nexport function loadGame(): GameState {\n  const saveFile: string | null = localStorage.getItem(itemName)\n  if (saveFile === null) {\n    console.log('Save file not found despite saveFileExists === true!')\n    return newGameState\n  }\n  console.log(saveFile)\n  return JSON.parse(saveFile)\n}\n\nexport function saveFileExists(): boolean {\n  const saveFile = localStorage.getItem(itemName)\n  if (typeof saveFile === 'string') {\n    const gameState = JSON.parse(saveFile)\n    if (isGameState(gameState)) {\n      return true\n    } else {\n      console.log(`isGameState false for following saved gameState:\\n\\n${saveFile}`)\n    }\n  }\n  return false\n}\n\nexport function deleteSaveFileWithConfirm(): void {\n  if (window.confirm('Really hard reset?\\nTHIS WILL DELETE ALL SAVED DATA. \\n\\nPress Cancel/No if unsure.')) {\n    if (!window.confirm('Please press OK/Yes to be saved.\\n (Press No/Cancel if you really really want to delete all your saved data.)')) {\n      localStorage.removeItem(itemName)\n      localStorage.removeItem('saveFile02')\n      localStorage.removeItem('saveFile03')\n      localStorage.removeItem('saveFile04')\n      window.location.reload()\n    }\n  }\n}\n\nexport function isGameState(state: any): state is GameState {\n  return state !== undefined &&\n      state !== null &&\n\n      typeof state.action === 'string' &&\n      typeof state.money === 'number' &&\n      typeof state.mood === 'object' &&\n      typeof state.unlockedFeatures === 'object' &&\n\n      typeof state.uncheckedOrders === 'number' &&\n      typeof state.orders === 'number' &&\n      typeof state.widgets === 'number' &&\n      typeof state.testedWidgets === 'number' &&\n      typeof state.packages === 'number' &&\n      typeof state.completedOrders === 'number'\n\n      // TODO: Add new properties here\n}\n","import React from 'react'\nimport Button from '../button/button';\nimport './footer-area.sass'\nimport { deleteSaveFileWithConfirm } from '../../utils/save-file-utils';\n\nexport default class FooterArea extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { liked: false }\n  }\n\n  render() {\n    return(\n      <div className=\"footer-container\">\n        <GameSavedText />\n        <LikeButton liked={this.state.liked} onClick={() => this.setState({ liked: true })} />\n        <div>|</div>\n        <Button text=\"Hard reset\" onClick={deleteSaveFileWithConfirm} />\n        <div>|</div>\n        <div className=\"github\"><a href=\"https://github.com/mmKALLL/widgetory\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></div>\n        <div>|</div>\n        <div className=\"copyright-notice\"> &copy; Esa Koskinen 2019 </div>\n      </div>\n    )\n  }\n}\n\nfunction LikeButton(props) {\n  if (props.liked) {\n    /* eslint-disable jsx-a11y/accessible-emoji */\n    return <div className=\"footer-thanks\">Thanks! ⭐️</div>\n  } else {\n    return <Button onClick={props.onClick} text=\"Like\" />\n  }\n}\n\nfunction GameSavedText(props) {\n  const lastSaveTime = localStorage.getItem('lastSavedAt')\n  if (typeof lastSaveTime === 'string') {\n    const saveTimeDiff = Date.now() - Date.parse(lastSaveTime)\n    if (saveTimeDiff < 3500) {\n      return <>Game saved!</>\n    }\n  }\n  return <></>\n}\n","export function getRandomMantra(): string {\n  const index = Math.floor(Math.random() * mantras.length);\n  return mantras[index];\n}\n\nexport function getInitialMantra(): string {\n  return mantras[0]\n}\n\nconst mantras: string[] = [\n  \"Build the future.\",\n  \"Create your destiny.\",\n  \"You can do this.\",\n  \"You can be successful.\",\n  \"You have what it takes.\",\n  \"Proceed with a kind heart.\",\n  \"You can create anything.\",\n  \"No problem, it's ok.\",\n  \"One widget at a time.\",\n  \"Keep things simple.\",\n  \"Do your best.\",\n  \"がんばってください。\",\n  \"Stay creative.\",\n  \"Stay true to your goal.\",\n  \"I love you.\",\n  \"Forge on.\",\n  \"Never yield to failure.\",\n  \"Success awaits.\",\n  \"You will evolve.\",\n  \"Compile true love.\",\n  \"Free your mind.\",\n  \"Appreciate everything.\",\n  \"You have profound wisdom.\",\n  \"Just one more widget.\",\n  \"Assembly guides you.\"\n]\n","import React from 'react'\nimport './main-menu.sass'\nimport FooterArea from '../../footer-area/footer-area'\nimport Button from '../../button/button';\nimport { saveFileExists } from '../../../utils/save-file-utils';\nimport { getRandomMantra, getInitialMantra } from '../../../utils/text-utils';\n\ninterface Props {\n  startNewGame: () => void\n  startSavedGame: () => void\n}\n\nexport default function MainMenu(props: Props) {\n  return (\n    <div className=\"main-menu\">\n      <h1>Widgetory</h1>\n\n      <MainMenuControls startNewGame={props.startNewGame} startSavedGame={props.startSavedGame} />\n      <FooterArea />\n    </div>\n  );\n}\n\nfunction MainMenuControls(props: Props) {\n  if (saveFileExists()) {\n    return (\n      <>\n        <div className=\"text-padded\">\n          {getRandomMantra()}\n        </div>\n        <Button className=\"button primary-action-button title-button\" onClick={props.startSavedGame} text=\"Continue building\" />\n      </>\n    )\n  }\n  else return (\n    <>\n      <div className=\"text-padded\">\n        {getInitialMantra()}\n      </div>\n      <Button className=\"button primary-action-button title-button\" onClick={props.startNewGame} text=\"Start building\" />\n    </>\n  )\n\n  // {/* <button class=\"button disabled primary-action-button title-button\" id=\"language-button\" onClick={props.changeLanguage('jp')}>日本語</button> */}\n}\n","import React, { useState, useEffect } from 'react'\nimport './cutscene.sass'\n\ninterface Props extends TextSettings {\n  text: string[]\n  endHandler: () => void\n}\n\ninterface TextSettings {\n  textScreenTime: number // milliseconds\n  textFadeTime: number\n  textColor: string\n  bgColor: string\n}\n\nexport default function Cutscene(props: Props) {\n  const [textIndex, setTextIndex] = useState(0)\n  const lastIndex = props.text.length\n\n  const advanceText = () => setTextIndex(textIndex + 1)\n\n  useEffect(() => {\n    if (textIndex >= lastIndex) {\n      props.endHandler()\n      return\n    }\n    const interval = setInterval(advanceText, props.textScreenTime + props.textFadeTime * 2)\n    return () => clearInterval(interval)\n  })\n\n  const currentText = () => props.text[textIndex]\n\n  return (\n    <>\n      <CutsceneText text={currentText()} settings={ props } />\n    </>\n  )\n}\n\nfunction CutsceneText(props: { text: string, settings: TextSettings }) {\n  return (\n    <>\n      <div className='cutscene-text' style={{ color: props.settings.textColor, backgroundColor: props.settings.bgColor }}>\n        { props.text }\n      </div>\n    </>\n  )\n}\n","import React, { ReactElement } from \"react\"\nimport './action-button.sass'\nimport Button from \"../button/button\";\n\nexport default function ActionButton(props: { text: string, subtext: string, onClick: () => void }): ReactElement {\n  return (\n    <span className=\"action-button-container\">\n      <Button text={props.text} onClick={props.onClick} className=\"button primary-action-button\" />\n      {props.subtext.split('\\n').map(item => <span key={item} className=\"action-button-subtext\">{item}</span>)}\n    </span>\n  )\n}\n","import React, { ReactElement } from 'react'\nimport './action-panel.sass'\nimport ActionButton from '../action-button/action-button';\nimport { FeatureName, PlayerAction } from '../../types';\n\ninterface Props {\n  orders: number\n  parts: number\n  widgets: number\n  testedWidgets: number\n  packages: number\n  completedOrders: number\n\n  partPrice: number\n\n  setPlayerAction: (action: PlayerAction) => void\n  unlockedFeatures: { [key in FeatureName]?: boolean }\n}\n\nexport default function ActionPanel(props: Props): ReactElement {\n  return (\n    <div className=\"action-panel-wrapper\">\n      {props.unlockedFeatures['order-button'] && <ActionButton text=\"Check orders\" subtext={`Orders: ${props.orders}`} onClick={() => props.setPlayerAction('check-orders')} />}\n      {props.unlockedFeatures['build-button'] && <ActionButton text=\"Build widgets\" subtext={`Parts: ${props.parts}\\nWidgets: ${props.widgets}`} onClick={() => props.setPlayerAction('build-widget')} />}\n      {props.unlockedFeatures['test-button'] && <ActionButton text=\"Test widgets\" subtext={`Tested widgets: ${props.testedWidgets}`} onClick={() => props.setPlayerAction('test-widget')} />}\n      {props.unlockedFeatures['package-button'] && <ActionButton text=\"Package widgets\" subtext={`Packages: ${props.packages}`} onClick={() => props.setPlayerAction('package-widget')} />}\n      {props.unlockedFeatures['deliver-button'] && <ActionButton text=\"Deliver packages\" subtext={`Completed orders: ${props.completedOrders}`} onClick={() => props.setPlayerAction('deliver-packages')} />}\n      {props.unlockedFeatures['purchase-parts-button'] && <ActionButton text=\"Purchase parts\" subtext={`Price/unit: ${props.partPrice}`} onClick={() => props.setPlayerAction('purchase-parts')} />}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Color, Mood } from '../../types'\n\ninterface Props {\n  mood: Mood\n}\n\nexport default class MoodHandler extends React.Component<Props> {\n  private TEXT_COLOR_SWITCH_THRESHOLD: number = 137\n  private TEXT_COLOR_DARK: string = '#111'\n  private TEXT_COLOR_LIGHT: string = '#eee'\n\n  // Add overall mood to RGB values\n  private moodToRGB(mood: Mood): Color {\n    return {\n      r: mood.overall + mood.r,\n      g: mood.overall + mood.g,\n      b: mood.overall + mood.b,\n    }\n  }\n\n  // Calculate text color based on background color. Need to provide enough contrast.\n  private textCSSColor(color: Color): string {\n    if (this.colorBrightness(color) < this.TEXT_COLOR_SWITCH_THRESHOLD) {\n      return this.TEXT_COLOR_LIGHT\n    } else {\n      return this.TEXT_COLOR_DARK\n    }\n  }\n\n  // Return brightness of color in the HSP space; range 0-255.\n  // http://alienryderflex.com/hsp.html\n  private colorBrightness(color: Color): number {\n    return Math.sqrt(0.299 * color.r * color.r + 0.587 * color.g * color.g + 0.114 * color.b * color.b);\n  }\n\n  // Returns a CSS parseable RGB color.\n  private colorToCSS(color: Color): string {\n    const r = Math.floor(color.r)\n    const g = Math.floor(color.g)\n    const b = Math.floor(color.b)\n    return `rgb(${r},${g},${b})`\n  }\n\n  render() {\n    const mood = this.props.mood\n    const color = this.moodToRGB(mood)\n    const elem = document.documentElement\n    const bgCSSColor = this.colorToCSS(color)\n    const textCSSColor = this.textCSSColor(color)\n    elem.style.setProperty(\"--mood-background-color\", bgCSSColor)\n    elem.style.setProperty(\"--mood-text-color\", textCSSColor)\n\n    return (\n      <>\n      </>\n    )\n  }\n}\n","// General use\n\n// Restrict a number between a min/max\nexport const clamp = (number: number, min: number, max: number): number => {\n  return Math.min(max, Math.max(min, number))\n}\n\nexport const sum = (array: number[]): number => {\n  return array.reduce((a, b) => a + b, 0)\n}\n\n// Explicitly check that all inferred types are used - see e.g. game-loop.ts\nexport function assertNever(x: never): never {\n  throw new Error(`Unexpected object in assertNever:\\n  ${x}`)\n}\n\nexport const typedObjectKeys = Object.keys as <T>(o: T) => Extract<keyof T, string>[]\nexport const typedObjectEntries = Object.entries as <O, V>(o: O) => [Extract<keyof O, string>, V][]\n","import React from 'react'\nimport { PlayerAction } from '../../types'\nimport { assertNever } from '../../utilities'\n\ninterface Props {\n  currentAction: PlayerAction\n}\n\nexport default function ActionDescriptionText({ currentAction }: Props) {\n  return (\n    <div>\n      You are currently\n      {\n        // prettier-ignore\n        currentAction === 'idle' ? ' idle' :\n        currentAction === 'change-action' ? ' context switching' :\n        currentAction === 'check-orders' ? ' checking orders' :\n        currentAction === 'build-widget' ? ' building a widget' :\n        currentAction === 'test-widget' ? ' testing a widget' :\n        currentAction === 'package-widget' ? ' packaging a widget' :\n        currentAction === 'deliver-packages' ? ' delivering packages' :\n        currentAction === 'purchase-parts' ? ' purchasing parts' :\n        currentAction === 'hire-worker' ? ' hiring workers' :\n        assertNever(currentAction)\n      }\n    </div>\n  )\n}\n","import React, { ReactElement } from \"react\"\nimport './information-panel.sass'\nimport { getActionTargetTime } from \"../game-screen/in-game-view/in-game-view\";\nimport ActionDescriptionText from \"../action-description-text/action-description-text\";\nimport { GameState } from \"../../types\";\n\nexport function progressBar(value: number, max: number, barLength: number = 30, character: string = '#'): string {\n  let progressPoints = Math.ceil(Math.max(0, Math.min(value, max)) / (max + 0.01) * barLength)\n  return `【${character.repeat(progressPoints)}${' '.repeat(barLength - progressPoints)}】`\n}\n\nexport default function InformationPanel(props: { debugEnabled: boolean, state: GameState }): ReactElement {\n\n  const actionCompletionPercentage = Math.floor(props.state.timeSinceActionStarted / getActionTargetTime(props.state) * 100)\n\n\n  return (\n    <div className=\"information-panel-container\">\n\n        <ActionDescriptionText currentAction={props.state.action} />\n        <div className={props.state.unlockedFeatures['test-button'] ? \"action-progress-container\" : \"hidden\"}>\n          Progress:\n            {/* Progress bar, percentage, then seconds left, e.g. '[###      ] 36% (4 sec)' */}\n            <pre className=\"action-progress-bar\">{progressBar(actionCompletionPercentage, 100)}</pre>\n            {` ${actionCompletionPercentage}%`}\n            {getActionTargetTime(props.state) < 600 * 1000 && // show time in sec if less than 10 min left; filters idle state off\n                ` (${Math.floor((getActionTargetTime(props.state) - props.state.timeSinceActionStarted + 1000) / 1000)} sec)`\n            }\n        </div>\n\n        {/* <div className={props.state.unlockedFeatures[\"package-button\"] ? \"information-panel-divider\" : \"hidden\"}></div> */}\n\n\n        <div className={props.state.unlockedFeatures[\"build-button\"] || props.state.unlockedFeatures[\"purchase-parts-button\"] ? \"information-panel-divider\" : \"hidden\"}></div>\n\n        <div className={props.state.unlockedFeatures[\"build-button\"] || props.state.unlockedFeatures[\"purchase-parts-button\"] ? \"money-text\" : \"hidden\"}>\n            Money: {props.state.money}</div>\n        <div className={props.state.consultantLevel >= 2 ? \"order-cancel-text\" : \"hidden\"}>\n            Time until order cancel: {Math.floor(props.state.timeUntilOrderCancel / 1000)} sec</div>\n        <div className={props.state.unlockedFeatures[\"purchase-parts-button\"] ? \"widget-part-price-text\" : \"hidden\"}>\n            Widget part purchase price: {props.state.widgetPartPrice}</div>\n        <div className={props.state.unlockedFeatures[\"deliver-button\"] ? \"widget-price-text\" : \"hidden\"}>\n            Widget sell price: {props.state.widgetPrice}</div>\n    </div>\n  )\n}\n","import React from 'react'\nimport FooterArea from '../../footer-area/footer-area';\nimport { saveGame } from '../../../utils/save-file-utils';\nimport ActionPanel from '../../action-panel/action-panel';\nimport MoodHandler from '../../mood-handler/mood-handler';\nimport InformationPanel from '../../information-panel/information-panel';\nimport { DEBUG, FPS, GameState, PlayerAction } from '../../../types';\nimport { sum } from '../../../utilities';\n\ninterface Props {\n  initialState: GameState\n}\n\nexport default class InGameView extends React.Component<Props, GameState> {\n  constructor(props: Props) {\n    super(props)\n    this.state = props.initialState\n\n    window.setInterval(this.updateGameState, 1000 / FPS)\n    window.setInterval(() => saveGame(this.state), 10 * 1000)\n    window.setInterval(this.payWorkerSalaries, 60 * 1000) // pay salaries every minute\n  }\n\n  setPlayerAction = (newAction: PlayerAction): void => {\n    if (newAction === this.state.action) {\n      // cancel current action\n      this.setState({\n        action: 'idle'\n      })\n    } else {\n      this.setState({\n        action: 'change-action',\n        nextAction: newAction,\n        timeSinceActionStarted: 0\n      })\n    }\n  }\n\n  updateGameState = (): void => {\n    this.setState(nextState)\n  }\n\n  payWorkerSalaries = (): void => {\n    this.setState(paySalaries)\n  }\n\n  render() {\n    return (\n      <div className='game-container'>\n        <InformationPanel\n          debugEnabled={DEBUG}\n          state={this.state}\n        />\n\n        <ActionPanel\n          orders={this.state.orders}\n          parts={this.state.widgetParts}\n          widgets={this.state.widgets}\n          testedWidgets={this.state.testedWidgets}\n          packages={this.state.packages}\n          completedOrders={this.state.completedOrders}\n\n          partPrice={this.state.widgetPartPrice}\n\n          setPlayerAction={this.setPlayerAction}\n          unlockedFeatures={this.state.unlockedFeatures}\n        />\n        <FooterArea />\n        <MoodHandler mood={this.state.mood} />\n      </div>\n    )\n  }\n}\n\n// create and return the next GameState based on the current one\nconst nextState = (state: GameState, _: Props): GameState => {\n  const ns: GameState = { ...state } // newState; shallow copy\n\n  // update mood\n  // TODO\n\n  // update orders\n  ns.timeToNextOrder -= 1000 / FPS\n  if (ns.timeToNextOrder < 0) {\n    ns.uncheckedOrders += 1\n    ns.timeToNextOrder = newOrderTime(ns.completedOrders)\n  }\n\n  // handle other actions\n  ns.timeSinceActionStarted += 1000 / FPS\n  const targetTime = getActionTargetTime(ns)\n  if (ns.action !== 'idle') {\n    if (ns.timeSinceActionStarted >= targetTime) {\n      ns.timeSinceActionStarted -= targetTime\n      switch (ns.action) {\n        case 'change-action':\n          ns.action = ns.nextAction !== undefined ? ns.nextAction : 'idle'\n          ns.nextAction = undefined\n          ns.timeSinceActionStarted = 0\n          break\n        case 'check-orders':\n          if (DEBUG) console.log(`got ${ns.uncheckedOrders} new orders, received ${ns.uncheckedOrders * ns.widgetPrice} yen`)\n          ns.orders += ns.uncheckedOrders\n          ns.money += ns.uncheckedOrders * ns.widgetPrice\n          ns.uncheckedOrders = 0\n          break\n        case 'build-widget':\n          if (ns.widgetParts > 0) {\n            ns.energyUsed += 2.0\n            ns.widgets += 1\n            ns.widgetParts -= 1\n          }\n          break\n        case 'test-widget':\n          if (ns.widgets > 0) {\n            ns.energyUsed += 0.6\n            ns.testedWidgets += 1\n            ns.widgets -= 1\n          }\n          break\n        case 'package-widget':\n          if (ns.testedWidgets > 0) {\n            ns.packages += 1\n            ns.testedWidgets -= 1\n          }\n          break\n        case 'deliver-packages':\n          const numberDelivered = Math.min(ns.orders, ns.packages)\n          console.log(`delivering ${numberDelivered} packages`)\n\n          ns.orders -= numberDelivered\n          ns.completedOrders += numberDelivered\n          ns.timeUntilOrderCancel += newOrderTime(ns.completedOrders) * numberDelivered\n          ns.packages -= numberDelivered\n\n          ns.widgetPrice -= numberDelivered\n\n          ns.action = 'idle'\n          break\n        case 'purchase-parts':\n          if (ns.money >= ns.widgetPartPrice) {\n            ns.widgetParts += 1\n            ns.money -= ns.widgetPartPrice\n          }\n          break\n        case 'hire-worker':\n          if (ns.money >= ns.workerHourlySalary) {\n            ns.unassignedWorkers += 1\n          }\n          break\n        default:\n\n      }\n    }\n  }\n\n  // update cancellations\n  ns.timeUntilOrderCancel -= 1000 / FPS\n  if (ns.timeUntilOrderCancel < 0) {\n    if (ns.orders > 0) {\n      ns.orders -= 1\n      ns.money -= ns.widgetPrice\n      if (DEBUG) console.log(`cancelled order, lost ${ns.widgetPrice} yen, ${ns.orders} checked and ${ns.uncheckedOrders} unchecked left, next in ${newTimeUntilOrderCancel(ns.completedOrders, ns.orders + ns.uncheckedOrders) / 1000} seconds`)\n    } else {\n      ns.uncheckedOrders -= 1\n      if (DEBUG) console.log(`cancelled unchecked order, lost no yen, ${ns.orders} checked and ${ns.uncheckedOrders} unchecked left, next in ${newTimeUntilOrderCancel(ns.completedOrders, ns.orders + ns.uncheckedOrders) / 1000} seconds`)\n    }\n    ns.timeUntilOrderCancel = newTimeUntilOrderCancel(ns.completedOrders, ns.orders + ns.uncheckedOrders)\n  }\n\n  // Randomly change the market situation; proportional ease over time towards magic constants, with random multipliers\n  if (Math.random() < 1 / (ns.completedOrders / 1000 + 1000)) {\n    ns.widgetPrice += Math.floor((Math.random() - 0.3) * ((8457 - ns.widgetPrice) / 100))\n    if (DEBUG) console.log(`widget price changed to ${ns.widgetPrice}`)\n  }\n  if (Math.random() < 1 / (ns.widgetParts + 1000)) {\n    ns.widgetPartPrice -= Math.floor((Math.random() - 0.3) * ((128 + ns.widgetPartPrice) / 100))\n    if (DEBUG) console.log(`widget part price changed to ${ns.widgetPartPrice}`)\n  }\n\n  // check unlocks\n  ns.unlockedFeatures = {\n    ...ns.unlockedFeatures\n  }\n  if (ns.orders > 0 && !ns.unlockedFeatures[\"build-button\"]) { ns.action = 'idle'; ns.unlockedFeatures[\"build-button\"] = true }\n  if (ns.widgets >= 3) { ns.unlockedFeatures[\"test-button\"] = true }\n  if (ns.testedWidgets >= 3) { ns.unlockedFeatures[\"package-button\"] = true }\n  if (ns.packages > 0) { ns.unlockedFeatures[\"deliver-button\"] = true }\n  if (ns.widgetParts === 0) { ns.unlockedFeatures[\"purchase-parts-button\"] = true }\n\n  if (ns.completedOrders === 7) { ns.unlockedFeatures[\"hire-worker-button\"] = true }\n  if (ns.unassignedWorkers > 0) { ns.unlockedFeatures[\"assign-worker-buttons\"] = true }\n  // if (ns.completedOrders === 16) { ns.unlockedFeatures[\"hire-sales-specialist-button\"] = true }\n  // if (ns.completedOrders === 40) { ns.unlockedFeatures[\"hire-consultant-button\"] = true }\n\n  return ns\n}\n\n// called every minute to pay salaries to workers\nconst paySalaries = (state: GameState, _: Props): GameState => {\n  const ns: GameState = { ...state } // newState; shallow copy\n  ns.money -= (ns.unassignedWorkers + getAssignedWorkerAmount(ns)) * ns.workerHourlySalary / 60\n  return ns\n}\n\nconst getAssignedWorkerAmount = (state: GameState): number => {\n  return sum(Object.values(state.assignedWorkers).map(v => v ?? 0))\n}\n\n\n// Return time between orders in milliseconds\nconst newOrderTime = (deliveredPackages: number): number => {\n  return 25 * 1000 * 40 / (deliveredPackages + 40)\n}\n\nconst newTimeUntilOrderCancel = (deliveredPackages: number, outstandingOrders: number): number => {\n  return 120 * 1000 * 10000 / (deliveredPackages + 10000) / (Math.pow(outstandingOrders + 1, 0.7)) // ~120s divided by orders until lategame\n}\n\nexport const getActionTargetTime = (state: GameState): number => {\n  switch (state.action) {\n    case 'change-action': return state.actionSwitchTime\n\n    case 'check-orders': return state.checkOrderTime\n    case 'build-widget': return state.widgetBuildTime\n    case 'test-widget': return state.widgetTestTime\n    case 'package-widget': return state.widgetPackageTime\n    case 'deliver-packages': return state.packageDeliveryTime\n\n    case 'purchase-parts': return state.widgetPartPurchaseTime\n    case 'hire-worker': return state.hireWorkerTime\n    default:\n      return 10000000000\n  }\n}\n\n","import React from 'react'\nimport MainMenu from './main-menu/main-menu';\nimport Cutscene from './cutscene/cutscene';\nimport InGameView from './in-game-view/in-game-view';\nimport { loadGame } from '../../utils/save-file-utils';\nimport { newGameState } from '../../types';\n\ntype State = {\n  screenName: 'main-menu' | 'intro'\n} | {\n  screenName: 'in-game-widget'\n  loadSavedGame: boolean\n}\n\nexport default class GameScreen extends React.Component<{}, State> {\n\n  constructor(props: any) {\n    super(props)\n    this.state = { screenName: 'main-menu' }\n  }\n\n  startNewGame = () => {\n    console.log('start intro')\n    this.setState({\n      screenName: 'intro'\n    })\n  }\n\n  startSavedGame = () => {\n    this.setState({\n      screenName: 'in-game-widget',\n      loadSavedGame: true,\n    })\n  }\n\n  finishIntro = () => {\n    this.setState({\n      screenName: 'in-game-widget',\n      loadSavedGame: false,\n    })\n  }\n\n  render() {\n    if (this.state.screenName === 'main-menu') {\n      return (\n        <MainMenu startNewGame={this.startNewGame} startSavedGame={this.startSavedGame} />\n      )\n    } else if (this.state.screenName === 'intro') {\n      return (\n        <Cutscene text={['Money Match Games presents ✨', 'The 47th Studio Esagames production', 'This game is a product of fiction.', 'Any similarity to real-world names, places, or events is purely coincidental.', 'Not suitable for children or those who are easily disturbed.']} textFadeTime={250} textScreenTime={600} bgColor='#fff' textColor='#111' endHandler={this.finishIntro} />\n      )\n    } else if (this.state.screenName === 'in-game-widget') {\n      return (\n        <InGameView initialState={this.state.loadSavedGame ? loadGame() : newGameState} />\n      )\n    } else {\n      return (\n        <>\n          error in GameScreen state, please post issue at https://github.com/mmKALLL/widgetry\n        </>\n      )\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport './App.sass'\nimport GameScreen from './components/game-screen/game-screen';\n\nexport default class App extends Component<{}, {}> {\n  render() {\n    return (\n      <div className=\"App\">\n        <link href=\"https://fonts.googleapis.com/css?family=Charm|Gloria+Hallelujah|Noto+Sans+JP|Roboto+Slab\" rel=\"stylesheet\"></link>\n        <GameScreen />\n      </div>\n    )\n  }\n}\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.sass'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// serviceWorker.unregister()\n"],"sourceRoot":""}